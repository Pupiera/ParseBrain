# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1234
__set_seed: !!python/object/apply:torch.manual_seed [ !ref <seed> ]
output_folder: !ref results/Orfeo_arc_eager/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

#Data files
data_folder: /home/getalp/pupiera/thesis/endtoend_asr_multitask/src/conllu/gold/ #/home/pupiera/getalp/pupiera/conllu/gold
train_conllu: !ref <data_folder>/orfeo_shuf.mini_train #!ref <data_folder>/orfeo_shuf.train
valid_conllu: !ref <data_folder>/orfeo_shuf.mini_train #!ref <data_folder>/orfeo_shuf.dev
test_conllu: !ref <data_folder>/orfeo_shuf.test

# Specific information related to conllu file
conllu_keys: [ 'lineNumber', 'words', 'lemmas','POS','UPOS','tags',
               'HEAD','DEP','tags2','tags3','timestamp_begin',
               'timestamp_end','speaker' ]


# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
# Must be 6 per GPU to fit 16GB of VRAM
batch_size: 8 #8
test_batch_size: 4 #4

dataloader_options:
  batch_size: !ref <batch_size>
  num_workers: 8
test_dataloader_options:
  batch_size: !ref <test_batch_size>
  num_workers: 8



# Decoding parameters
# Be sure that the bos and eos index match with the BPEs ones
blank_index: 0
bos_index: 1
eos_index: 2


#tokenizer
pretrained_lm_path: /home/getalp/pupiera/thesis/endtoend_asr_multitask/src/LM/camembert-base
tokenizer: !new:sentencepiece.SentencePieceProcessor


embedding_dim: 768

# LM
lm_model: !new:parsebrain.speechbrain_custom.lobes.models.transformer.transformerLM.TransformerLM
  vocab: 32005 #Need to be the same as tranformer tokenizer (BPE). from tokenizer.vocab_size: 32005
  d_model: !ref <embedding_dim> #base size
  nhead: 12 # base
  num_encoder_layers: 12
  num_decoder_layers: 0
  d_ffn: 3072
  dropout: 0.0
  activation: !name:torch.nn.GELU
  normalize_before: False


# Training parameters
number_of_epochs: 100
number_of_epochs_static: 50

lr: 1.0
ckpt_interval_minutes: 30 # save checkpoint every N minutes

model_opt_class: !name:torch.optim.Adadelta
  lr: !ref <lr>
  rho: 0.95
  eps: 1.e-8

# feature extractor
features_extractor: !new:parsebrain.hugging_face_text.LastSubWordEmbedding


#
# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: !ref <number_of_epochs>

modules:
  lm_model: !ref <lm_model>
  parser: !ref <neural_network>
  label_parser: !ref <neural_network_label>

model: !new:torch.nn.ModuleList
  - [ !ref <lm_model>, !ref <neural_network>, !ref <neural_network_label> ]
#
# Metrics
#

#
# CONLLU output file
#

file_valid: "Orfeo_Camembert_base_VALID.debug"

#
# Checkpointer
#

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: !ref <save_folder>
  recoverables:
    model: !ref <model>
    #scheduler_model: !ref <lr_annealing_model>
    counter: !ref <epoch_counter>

# pretrainer to load pretrained LM
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  collect_in: !ref <save_folder>
  loadables:
    lm: !ref <lm_model>
    tokenizer: !ref <tokenizer>
  paths:
    lm: !ref <pretrained_lm_path>/pytorch_model.bin # Camembert
    tokenizer: !ref <pretrained_lm_path>/sentencepiece.bpe.model # Camembert




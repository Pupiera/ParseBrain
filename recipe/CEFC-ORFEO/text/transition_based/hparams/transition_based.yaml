# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1234
__set_seed: !!python/object/apply:torch.manual_seed [ !ref <seed> ]
output_folder: !ref results/Orfeo_arc_eager/<seed>
wer_file: !ref <output_folder>/wer.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

#Data files
data_folder: /home/getalp/pupiera/thesis/endtoend_asr_multitask/src/conllu/gold/ #/home/pupiera/getalp/pupiera/conllu/gold
train_conllu: !ref <data_folder>/orfeo_shuf_no_proj.train #!ref <data_folder>/orfeo_shuf.mini_train #
valid_conllu: !ref <data_folder>/orfeo_shuf.dev #!ref <data_folder>/orfeo_shuf.mini_train #!ref <data_folder>/orfeo_shuf.dev
test_conllu: !ref <data_folder>/orfeo_shuf.test

# Specific information related to conllu file
conllu_keys: [ 'lineNumber', 'words', 'lemmas','POS','UPOS','tags',
               'HEAD','DEP','tags2','tags3','timestamp_begin',
               'timestamp_end','speaker' ]


# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
# Must be 6 per GPU to fit 16GB of VRAM
batch_size: 16 #8
test_batch_size: 32 #4

dataloader_options:
  batch_size: !ref <batch_size>
  num_workers: 1
test_dataloader_options:
  batch_size: !ref <test_batch_size>
  num_workers: 8



# Decoding parameters
# Be sure that the bos and eos index match with the BPEs ones
blank_index: 0
bos_index: 5
eos_index: 6


#tokenizer
#pretrained_lm_path: /home/getalp/pupiera/thesis/endtoend_asr_multitask/src/LM/camembert-base
tokenizer: !new:sentencepiece.SentencePieceProcessor


embedding_dim: 768

# LM
lm_model: !new:parsebrain.speechbrain_custom.lobes.models.transformer.transformerLM.TransformerLM
  vocab: 32005 #Need to be the same as tranformer tokenizer (BPE). from tokenizer.vocab_size: 32005
  d_model: !ref <embedding_dim> #base size
  nhead: 12 # base
  num_encoder_layers: 12
  num_decoder_layers: 0
  d_ffn: 3072
  dropout: 0.0
  activation: !name:torch.nn.GELU
  normalize_before: False

# Features extractor

features_extractor: !new:parsebrain.hugging_face_text.LastSubWordEmbedding

# Training parameters
number_of_epochs: 100
number_of_epochs_static: 50


ckpt_interval_minutes: 30 # save checkpoint every N minutes


#
# Parser
#

#neural_network: !new:speechbrain.nnet.containers.Sequential
#  input_shape: [ null, null, 768 ]
#  RNN1: !name:speechbrain.nnet.RNN.LSTM
#    hidden_size: 1024
#    num_layers: 1
#    bias: True
#    bidirectional: False
#  bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
#  activation: !new:torch.nn.LeakyReLU
#  drop: !new:torch.nn.Dropout
#    p: 0.15
#  linear2: !name:speechbrain.nnet.linear.Linear
#    n_neurons: 1024
#    bias: True
#  bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
#  activation2: !new:torch.nn.LeakyReLU
#  drop2: !new:torch.nn.Dropout
#    p: 0.15
#  linear3: !name:speechbrain.nnet.linear.Linear
#    n_neurons: 1024
#    bias: True
#  bn3: !name:speechbrain.nnet.normalization.BatchNorm1d
#  activation3: !new:torch.nn.LeakyReLU
#  linear_head: !name:speechbrain.nnet.linear.Linear
#    n_neurons: !ref <number_transitions>
#    bias: True
#  log_softmax: !new:speechbrain.nnet.activations.Softmax
#    apply_log: False

#
# Transition (UAS)
#

concat_embed_dim: !ref <stack_depth_computer> + <embedding_dim>

neural_network: !new:speechbrain.nnet.containers.Sequential
  input_shape: [ null, null, 1536 ]
  linear1: !name:speechbrain.nnet.linear.Linear
    n_neurons: 1024
    bias: True
  bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
  activation1: !new:torch.nn.LeakyReLU
  drop: !new:torch.nn.Dropout
    p: 0.40
  linear2: !name:speechbrain.nnet.linear.Linear
    n_neurons: 1024
    bias: True
  bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
  activation2: !new:torch.nn.LeakyReLU
  drop2: !new:torch.nn.Dropout
    p: 0.40
  linear_head: !name:speechbrain.nnet.linear.Linear
    n_neurons: !ref <number_transitions>
    bias: True
  log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

number_transitions: 4
transition: !new:parsebrain.processing.dependency_parsing.transition_based.transition.ArcEagerTransition

#
# Label (LAS)
#
neural_network_label: !new:speechbrain.nnet.containers.Sequential
    input_shape: [null, null, 1536]
    linear1: !name:speechbrain.nnet.linear.Linear
        n_neurons: 1024
        bias: True   
    bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation: !new:torch.nn.LeakyReLU
    drop: !new:torch.nn.Dropout
        p: 0.15
    linear2: !name:speechbrain.nnet.linear.Linear
        n_neurons: 1024
        bias: True
    bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation2: !new:torch.nn.LeakyReLU
    linear_head: !name:speechbrain.nnet.linear.Linear
      n_neurons: !ref <number_label>
      bias: True
    log_softmax: !new:speechbrain.nnet.activations.Softmax
      apply_log: True

number_label: 17      

#
# UPOS
#

neural_network_POS: !new:speechbrain.nnet.containers.Sequential
  input_shape: [ null, null, 768 ]
  linear1: !name:speechbrain.nnet.linear.Linear
    n_neurons: 1024
    bias: True
  bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
  activation: !new:torch.nn.LeakyReLU
  drop: !new:torch.nn.Dropout
    p: 0.50
  linear2: !name:speechbrain.nnet.linear.Linear
    n_neurons: 1024
    bias: True
  bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
  activation2: !new:torch.nn.LeakyReLU
  drop2: !new:torch.nn.Dropout
    p: 0.50
  linear_head: !name:speechbrain.nnet.linear.Linear
    n_neurons: !ref <number_POS>
    bias: True
  log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

number_POS: 22

stack_depth_computer: 1

features_computer: !new:parsebrain.processing.dependency_parsing.transition_based.configuration_features_computer.ConfigurationFeaturesComputerConcat
  stack_depth: !ref <stack_depth_computer>
  dim: !ref <embedding_dim>

dynamic_oracle: !new:parsebrain.processing.dependency_parsing.transition_based.dynamic_oracle.DynamicOracleArcEager
static_oracle: !new:parsebrain.processing.dependency_parsing.transition_based.static_oracle.StaticOracleArcEager

label_parser: !new:parsebrain.processing.dependency_parsing.transition_based.label.LabelPolicieEmbedding

parser: !new:parsebrain.processing.dependency_parsing.transition_based.TransitionBasedParser
  neural_network: !ref <neural_network>
  transition: !ref <transition>
  features_computer: !ref <features_computer>
  dynamic_oracle: !ref <dynamic_oracle>
  label_policie: !ref <label_parser>
  label_neural_network: !ref <neural_network_label>
  static_oracle: !ref <static_oracle>
  exploration_rate: 0.5

parse_cost: !name:speechbrain.nnet.losses.nll_loss
  reduction: "mean"

label_cost: !name:speechbrain.nnet.losses.nll_loss
  reduction: "mean"

pos_cost: !name:speechbrain.nnet.losses.nll_loss
  reduction: "mean"


#lr: 1.0
#model_opt_class: !name:torch.optim.Adadelta
#  lr: !ref <lr>
#  rho: 0.95
#  eps: 1.e-8
lr: 0.001
model_opt_class: !name:torch.optim.Adam
  lr: !ref <lr>


#
# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: !ref <number_of_epochs>

modules:
  lm_model: !ref <lm_model>
  parser: !ref <neural_network>
  label_parser: !ref <neural_network_label>
  pos_network: !ref <neural_network_POS>

model: !new:torch.nn.ModuleList
  - [ !ref <lm_model>, !ref <neural_network>, !ref <neural_network_label>, !ref <neural_network_POS> ]
#
# Metrics
#

acc_dyna: !new:speechbrain.utils.Accuracy.AccuracyStats
eval_conll: !name:parsebrain.processing.dependency_parsing.eval.conll18_ud_eval.evaluate_wrapper

#
# CONLLU output file
#

file_valid: "Orfeo_Camembert_base_VALID.debug"

#
# Checkpointer
#

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: !ref <save_folder>
  recoverables:
    model: !ref <model>
    #scheduler_model: !ref <lr_annealing_model>
    counter: !ref <epoch_counter>

# pretrainer to load pretrained LM
#pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
#  collect_in: !ref <save_folder>
#  loadables:
#    lm: !ref <lm_model>
#    tokenizer: !ref <tokenizer>
#  paths:
#    lm: !ref <pretrained_lm_path>/pytorch_model.bin # Camembert
#    tokenizer: !ref <pretrained_lm_path>/sentencepiece.bpe.model # Camembert




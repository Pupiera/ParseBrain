# ############################################################################
# Model: E2E ASR with attention-based ASR
# Encoder: CRDNN model
# Decoder: GRU + beamsearch + RNNLM
# Tokens: BPE with unigram
# losses: Transducer
# Training: Librispeech 100h
# Authors:  Abdel HEBA, Mirco Ravanelli, Sung-Lin Yeh 2020
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1234
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/transducer_wav2vec2_simpleBeam/<seed>
wer_file: !ref <output_folder>/wer.txt
wer_file_valid: !ref <output_folder>/wer_VALID.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files
data_folder: /home/getalp/data/ASR_data/FR/CORPUS_AUDIO/cefc-orfeo_v.1.5_december2021/11/oral  # e.g, /localscratch/cv-corpus-5.1-2020-06-22/fr
train_tsv_file: !ref <data_folder>/train.tsv  # Standard CommonVoice .tsv files
dev_tsv_file: !ref <data_folder>/dev.tsv  # Standard CommonVoice .tsv files
test_tsv_file: !ref <data_folder>/test.tsv  # Standard CommonVoice .tsv files
accented_letters: True
language: fr # use 'it' for Italian, 'rw' for Kinyarwanda, 'en' for english
train_csv: !ref <save_folder>/train.csv
valid_csv: !ref <save_folder>/dev.csv
test_csv: !ref <save_folder>/test.csv
skip_prep: True # Skip data preparation

#CONLLU GOLD FILE used for evaluation
dir_gold_conllu: /home/getalp/pupiera/thesis/endtoend_asr_multitask/src/conllu/gold
dev_gold_conllu: !ref <dir_gold_conllu>/cleaned_v2_valid.conllu
test_gold_conllu: !ref <dir_gold_conllu>/cleaned_v2_test.conllu
dev_output_conllu: !ref <output_folder>/Eval-Valid_AUDIO
test_output_conllu: !ref <output_folder>/Eval-test_AUDIO
transcript_file: transcript_test_AUDIO

alig_path: !ref <output_folder>/aligned_wer.txt


# BOS AND EOS

pos_blank: 0
gov_blank: 0
dep_blank: 0

pos_bos: 1
gov_bos: 1
dep_bos: 1

pos_eos: !ref <output_neurons_pos>

gov_eos: !ref <output_neurons_gov>

dep_eos: !ref <output_neurons_dep>


# We remove utterance slonger than 10s in the train/dev/test sets as
# longer sentences certainly correspond to "open microphones".
avoid_if_longer_than: 10.0
avoid_if_shorter_than: 0.3
# Training parameters
number_of_epochs: 30
batch_size: 8
batch_size_valid: 4
lr: 1.0
lr_wav2vec: 0.0001

sorting: ascending
ckpt_interval_minutes: 30 # save checkpoint every N min
# MTL for encoder with CTC (uncomment enc_lin layer)
number_of_ctc_epochs: 2
ctc_weight: 0.33
# MTL for decoder with CE (uncomment dec_lin layer)
number_of_ce_epochs: 2
ce_weight: 0.33

# Feature parameters
sample_rate: 16000

augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

model_opt_class: !name:torch.optim.Adadelta
   lr: !ref <lr>
   rho: 0.95
   eps: 1.e-8

wav2vec_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_wav2vec>

# BPE parameters
token_type: unigram  # ["unigram", "bpe", "char"]
character_coverage: 1.0

# Dataloader options
train_dataloader_opts:
   batch_size: !ref <batch_size>

valid_dataloader_opts:
   batch_size: !ref <batch_size_valid>

test_dataloader_opts:
   batch_size: !ref <batch_size_valid>

# Model parameters
activation: !name:torch.nn.LeakyReLU
dropout: 0.15
cnn_blocks: 3
cnn_channels: (128, 200, 256)
inter_layer_pooling_size: (2, 2, 2)
cnn_kernelsize: (3, 3)
time_pooling_size: 4
rnn_class: !name:speechbrain.nnet.RNN.LSTM
rnn_layers: 5
rnn_neurons: 1024
rnn_bidirectional: True
dnn_blocks: 2
dnn_neurons: 1024
dec_neurons: 1024
output_neurons: 1000  # index(blank/eos/bos) = 0
output_neurons_dep: 20 # 18  BOS +EOS
output_neurons_gov: 847 # 845  BOS +EOS
output_neurons_pos: 24 # 22 + BOS +EOS
joint_dim: 1024
blank_index: 0

# Decoding parameters
beam_size: 10
nbest: 1
# by default {state,expand}_beam = 2.3 as mention in paper
# https://arxiv.org/abs/1904.02619
state_beam: 2.3
expand_beam: 2.3

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
   limit: !ref <number_of_epochs>



#
# WAV2VEC2
#

# URL for the biggest LeBenchmark wav2vec french.
wav2vec2_hub: LeBenchmark/wav2vec2-FR-7K-large
freeze_wav2vec: False

wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
    source: !ref <wav2vec2_hub>
    output_norm: True
    freeze: !ref <freeze_wav2vec>
    save_path: !ref <save_folder>/wav2vec2_checkpoint

#
#ENCODER
#

enc: !new:speechbrain.nnet.containers.Sequential
    input_shape: [null, null, 1024]
    linear1: !name:speechbrain.nnet.linear.Linear
        n_neurons: 1024
        bias: True
    bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation: !new:torch.nn.LeakyReLU
    drop: !new:torch.nn.Dropout
        p: 0.15
    linear2: !name:speechbrain.nnet.linear.Linear
        n_neurons: 1024
        bias: True
    bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation2: !new:torch.nn.LeakyReLU
    drop2: !new:torch.nn.Dropout
        p: 0.15
    linear3: !name:speechbrain.nnet.linear.Linear
        n_neurons: 1024
        bias: True
    bn3: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation3: !new:torch.nn.LeakyReLU

# For MTL CTC over the encoder
enc_lin: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <dnn_neurons>
   n_neurons: !ref <joint_dim>

# Uncomment for MTL with CTC
ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
  blank_index: !ref <blank_index>


# embedding for each task
# blank id for asr is <unk> in the tokenizer.
emb_asr: !new:speechbrain.nnet.embedding.Embedding
   num_embeddings: !ref <output_neurons>
   consider_as_one_hot: True
   blank_id: !ref <blank_index>

# blank id here would be padding value for the task . need to be positive so no -100.

emb_pos: !new:speechbrain.nnet.embedding.Embedding
   num_embeddings: !ref <output_neurons_pos>
   consider_as_one_hot: True
   blank_id: !ref <pos_blank>

emb_gov: !new:speechbrain.nnet.embedding.Embedding
   num_embeddings: !ref <output_neurons_gov>
   consider_as_one_hot: True
   blank_id: !ref <gov_blank>

emb_dep: !new:speechbrain.nnet.embedding.Embedding
   num_embeddings: !ref <output_neurons_dep>
   consider_as_one_hot: True
   blank_id: !ref <dep_blank>

# Decoder layer

dec: !new:speechbrain.nnet.RNN.GRU
   input_shape: [null, null, !ref <output_neurons> - 1]
   hidden_size: !ref <dec_neurons>
   num_layers: 1
   re_init: True

dec_pos: !new:speechbrain.nnet.RNN.GRU
   input_shape: [null, null, !ref <output_neurons_pos> - 1]
   hidden_size: !ref <dec_neurons>
   num_layers: 1
   re_init: True

dec_gov: !new:speechbrain.nnet.RNN.GRU
   input_shape: [null, null, !ref <output_neurons_gov> - 1]
   hidden_size: !ref <dec_neurons>
   num_layers: 1
   re_init: True

dec_dep: !new:speechbrain.nnet.RNN.GRU
   input_shape: [null, null, !ref <output_neurons_dep> - 1]
   hidden_size: !ref <dec_neurons>
   num_layers: 1
   re_init: True

# For MTL with LM over the decoder
dec_lin: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <dec_neurons>
   n_neurons: !ref <joint_dim>
   bias: False


# For MLT with CTC
ce_cost: !name:speechbrain.nnet.losses.nll_loss
   label_smoothing: 0.1





# Decoder

Tjoint: !new:speechbrain.nnet.transducer.transducer_joint.Transducer_joint
   joint: sum # joint [sum | concat]
   nonlinearity: !ref <activation>

transducer_lin: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <joint_dim>
   n_neurons: !ref <output_neurons>
   bias: False


transducer_POS: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <dec_neurons>
   n_neurons: !ref <output_neurons_pos>
   bias: False


transducer_GOV: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <dec_neurons>
   n_neurons: !ref <output_neurons_gov>
   bias: False


transducer_DEP: !new:speechbrain.nnet.linear.Linear
   input_size: !ref <dec_neurons>
   n_neurons: !ref <output_neurons_dep>
   bias: False


log_softmax: !new:speechbrain.nnet.activations.Softmax
   apply_log: True

transducer_cost: !name:speechbrain.nnet.losses.transducer_loss
   use_torchaudio: True
   blank_index: !ref <blank_index>

transducer_cost_pos: !name:speechbrain.nnet.losses.transducer_loss
   use_torchaudio: True
   blank_index: !ref <pos_blank>

transducer_cost_gov: !name:speechbrain.nnet.losses.transducer_loss
   use_torchaudio: True
   blank_index: !ref <gov_blank>

transducer_cost_dep: !name:speechbrain.nnet.losses.transducer_loss
   use_torchaudio: True
   blank_index: !ref <dep_blank>

# Parsing archi sequence labeling

reader_alig:  !new:parsebrain.processing.dependency_parsing.sequence_labeling.alignment_oracle.reader.ReaderSpeechbrain

oracle: !new:parsebrain.processing.dependency_parsing.sequence_labeling.alignment_oracle.OracleRelPos
    reader_alig: !ref <reader_alig>

eval_st : !new:parsebrain.processing.dependency_parsing.eval.speech_conll18_ud_eval.SpeechEval

evaluator: !new:parsebrain.processing.dependency_parsing.sequence_labeling.encoding.DecoderRelPos
    eval_st: !ref <eval_st>

encoding: !new:parsebrain.processing.dependency_parsing.sequence_labeling.encoding.RelPosEncoding



# Fuse all the decoder ouput
# try both concatenation and deep linear and simple addition. (Need to be same shape)

joint_syntax: !new:parsebrain.speechbrain_custom.nnet.transducer.transducer_joint.TransducerJointMultitask
  joint: sum


# for MTL
# update model if any HEAD module is added
modules:
   wav2vec2: !ref <wav2vec2>
   enc: !ref <enc>
   enc_lin: !ref <enc_lin>
   emb_asr: !ref <emb_asr>
   emb_pos: !ref <emb_pos>
   emb_gov: !ref <emb_gov>
   emb_dep: !ref <emb_dep>
   dec: !ref <dec>
   dec_lin: !ref <dec_lin>
   dec_pos: !ref <dec_pos>
   dec_gov: !ref <dec_gov>
   dec_dep: !ref <dec_dep>
   Tjoint: !ref <Tjoint>
   joint_syntax: !ref <joint_syntax>
   transducer_lin: !ref <transducer_lin>
   transducer_pos: !ref <transducer_POS>
   transducer_gov: !ref <transducer_GOV>
   transducer_dep: !ref <transducer_DEP>
   augmentation: !ref <augmentation>

# for MTL
# update model if any HEAD module is added
model: !new:torch.nn.ModuleList
   - [!ref <wav2vec2>, !ref <enc>,
      !ref <emb_asr>, !ref <emb_pos>, !ref <emb_gov>, !ref <emb_dep>,
      !ref <dec>, !ref <dec_pos>, !ref <dec_gov>, !ref <dec_dep>,
      !ref <dec_lin>, !ref <enc_lin>,
      !ref <transducer_lin>, !ref <transducer_POS>, !ref <transducer_GOV>, !ref <transducer_DEP>,
   ]

# greedy_searcher: !new:speechbrain.decoders.transducer.TransducerBeamSearcher
#   decode_network_lst: [!ref <emb>, !ref <dec>]
#   tjoint: !ref <Tjoint>
#   classifier_network: [!ref <transducer_lin>]
#   blank_id: !ref <blank_index>
#   beam_size: 1
#   nbest: 1

# two different fusion layer, one for all the task (ASR, POS, GOV, DEP)
# and one for the two modality (audio, label)

beam_searcher: !new:parsebrain.speechbrain_custom.decoders.transducer.TransducerBeamSearcherMultitaskSimple
   decode_network_task_dict:
    -asr : [!ref <emb_asr>, !ref <dec>]
    -pos : [!ref <emb_pos>, !ref <dec_pos>]
    -gov : [!ref <emb_gov>, !ref <dec_gov>]
    -dep : [!ref <emb_dep>, !ref <dec_dep>]
   tjoint: !ref <Tjoint>
   transducer_joint_multitask: !ref <joint_syntax>
   classifier_network_task_dict:
     -asr : [!ref <transducer_lin>]
     -pos : [!ref <transducer_POS>]
     -gov : [!ref <transducer_GOV>]
     -dep : [!ref <transducer_DEP>]
   blank_id_task:
     -asr : !ref <blank_index>
     -pos : !ref <pos_blank>
     -gov : !ref <gov_blank>
     -dep : !ref <dep_blank>
   beam_size_task:
    -asr : !ref <beam_size>
    -pos : !ref <beam_size>
    -gov : !ref <beam_size>
    -dep : !ref <beam_size>
   nbest_task:
     -asr : 1
     -pos : 1
     -gov : 1
     -dep : 1
   state_beam: !ref <state_beam>
   expand_beam: !ref <expand_beam>

lr_annealing_model: !new:speechbrain.nnet.schedulers.NewBobScheduler
   initial_value: !ref <lr>
   improvement_threshold: 0.0025
   annealing_factor: 0.8
   patient: 0


lr_annealing_wav2vec: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_wav2vec>
    improvement_threshold: 0.0025
    annealing_factor: 0.9
    patient: 0



checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        wav2vec2: !ref <wav2vec2>
        model: !ref <model>
        scheduler_model: !ref <lr_annealing_model>
        scheduler_wav2vec: !ref <lr_annealing_wav2vec>
        counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
   save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
   split_tokens: True
